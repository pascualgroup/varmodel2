#ifndef parameters_hpp
#define parameters_hpp

#include <string>
#include <vector>

namespace varmodel {{

/*** DEBUGGING ***/

const bool {PRINT_FUNCTION_TRACE};
const int64_t {PRINT_DEBUG_LEVEL};

/*** OUTPUT SETTINGS ***/

// Path to database output file for sampled data, absolute or relative to the working directory the program is executed in.
const std::string {SAMPLE_DB_FILENAME};

// Whether or not to write out all hosts to database
const bool {OUTPUT_HOSTS};

// Whether or not to write out all genes to database
const bool {OUTPUT_GENES};

// Whether or not to write out all strains to database
const bool {OUTPUT_STRAINS};

// How often to sample hosts, in simulation time units
const double {HOST_SAMPLING_PERIOD};

// Whether or not to sample transmission events
const bool {SAMPLE_TRANSMISSION_EVENTS};

// How often to sample a transmission event, in number of transmission events.
const uint64_t {TRANSMISSION_EVENT_SAMPLING_SKIP};

// Burn-in period for simulation before which output will not be written.
const double {T_BURNIN};


/*** VERIFICATION SETTINGS ***/

// How often to verify the validity of all data structures

const bool {VERIFICATION_ON};

const double {VERIFICATION_PERIOD};


/*** CHECKPOINT SETTINGS ***/

// Whether or not to load from a checkpoint file
const bool {LOAD_FROM_CHECKPOINT};

// Filename of checkpoint to load from
const std::string {CHECKPOINT_LOAD_FILENAME};

// Whether or not to save checkpoints
const bool {SAVE_TO_CHECKPOINT};

// Path to checkpoint output file
const std::string {CHECKPOINT_SAVE_FILENAME};

// How often, in simulation time units, to save checkpoints
const double {CHECKPOINT_SAVE_PERIOD};


/*** MODEL PARAMETERS ***/

enum SelectionMode {{
    SPECIFIC_IMMUNITY,
    GENERAL_IMMUNITY,
    NEUTRALITY
}};
const SelectionMode {SELECTION_MODE};

// Random seed for simulation.
const uint64_t {RANDOM_SEED};

// Simulation time corresponding to one year
const double {T_YEAR};
                
// Simulation end time
const double {T_END};

// Number of genes in the global pool.
const uint64_t {N_GENES_IN_POOL};

// Number of genes per pathogen strain.
const uint64_t {N_GENES_PER_STRAIN};

// Number of loci
const uint64_t {N_LOCI};

// Number of alleles at each locus
const std::vector<uint64_t> {N_ALLELES};

// Transmissibility of genes
const double {GENE_TRANSMISSIBILITY}; 

// Whether coinfection reduces transmissibility
const bool {COINFECTION_REDUCES_TRANSMISSION};

// Global immunity loss rate
const double {IMMUNITY_LOSS_RATE};

// Probability per gene of a mutation when a strain is picked up.
const double {P_MUTATION};

// Probability that a transmitted strain will be formed from recombination.
const double {P_STRAIN_RECOMBINATION};

// Duration of liver stage (pre-expression)
const double {T_LIVER_STAGE};

// Gene deactivation rate when not immune or under neutrality
const double {TRANSITION_RATE_NOT_IMMUNE};

// Gene deactivation rate when fully immune
const double {TRANSITION_RATE_IMMUNE};

// Infection clearance rate
const double {CLEARANCE_RATE};

// If true, use a discrete PDF for host lifetime distribution.
// If false, draw host lifetimes from an exponential distribution with mean MEAN_HOST_LIFETIME.
const bool {USE_HOST_LIFETIME_PDF};

// If USE_HOST_LIFETIME_PDF is true: host-lifetime distribution, specified as a discrete PDF, one weight per year, with uniform density within each year.
const std::vector<double> {HOST_LIFETIME_PDF};

// If USE_HOST_LIFETIME_PDF is false, use this as the mean of the (truncated) exponential distribution used to draw host lifetimes
const double {MEAN_HOST_LIFETIME};

// If USE_HOST_LIFETIME_PDF is false, use this as a maximum value for host lifetimes used to truncate the exponential distribution.
const double {MAX_HOST_LIFETIME};

// Number of populations
const uint64_t {N_POPULATIONS};

// Number of hosts, by population.
const std::vector<uint64_t> {N_HOSTS};

// Number of initial infections, by population.
const std::vector<uint64_t> {N_INITIAL_INFECTIONS};

// Parameters governing the biting rate sinusoid for each population
// BITING_RATE_MEAN: mean value.
// BITING_RATE_RELATIVE_AMPLITUDE: amplitude as a fraction of the mean.
// BITING_RATE_PEAK_PHASE: fraction of the year (between 0 and 1) at which the sinusoid should reach its peak. 
// The period of the sinusoid is T_YEAR.
const std::vector<double> {BITING_RATE_MEAN};
const std::vector<double> {BITING_RATE_RELATIVE_AMPLITUDE};
const std::vector<double> {BITING_RATE_PEAK_PHASE};

// Immigration rate, in number of random infection events per unit time (per population, not per capita).
const std::vector<double> {IMMIGRATION_RATE};

}} // namespace varmodel

#endif // #ifndef parameters_hpp
