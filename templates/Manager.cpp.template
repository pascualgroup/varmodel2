#include "{manager_type}.hpp"
{manager_includes}
#include "{object_type}.hpp"
{object_includes}

#include "IndexedMap.hpp"

namespace varmodel {{

{object_type} * {manager_type}::create() {{
    return create(next_id++);
}}

{object_type} * {manager_type}::create(uint64_t id) {{
    {object_type} * obj = new {object_type}(id);
    collection.add(obj);
    return obj;
}}

{object_type} * {manager_type}::object_for_id(uint64_t id) {{
     return collection.object_for_id(id);
}}

std::vector<{object_type} *> & {manager_type}::objects() {{
    return collection.as_vector();
}}

void {manager_type}::load_from_checkpoint(sqlite3 * db) {{
    sqlite3_stmt * stmt = NULL;
    sqlite3_prepare_v2(db, "SELECT * FROM {object_type};", -1, &stmt, NULL);
    while(true) {{
        if(sqlite3_step(stmt) != SQLITE_ROW) {{
            break;
        }}
        {object_type} * obj = create(sqlite3_column_int64(stmt, 0));
        {load_column_statements}
    }}
    sqlite3_finalize(stmt);
}}

{resolve_relationships_signature} {{
    
}}

void {manager_type}::save_to_checkpoint(sqlite3 * db) {{
    // Create main object table
    sqlite3_exec(db, "CREATE TABLE {object_type} (id INTEGER{sql_create_columns});", NULL, NULL, NULL);
    
    // Insert rows into main object table
    {{
        sqlite3_stmt * stmt = NULL;
        sqlite3_prepare_v2(db, "INSERT INTO {object_type} VALUES (?{sql_insert_qmarks});", -1, &stmt, NULL);
        for({object_type} * obj : collection.as_vector()) {{
            sqlite3_bind_int64(stmt, 1, obj->id);
            {bind_column_statements}
            sqlite3_step(stmt);
            sqlite3_reset(stmt); 
        }}
        sqlite3_finalize(stmt);
    }}
    
    // Create and save IndexedMap references into separate tables
    {create_reflist_blocks}
}}

}} // namespace varmodel
